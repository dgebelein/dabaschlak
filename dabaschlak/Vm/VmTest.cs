using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace dabaschlak
{
	class VmTest:VmBase
	{

		public VmTest()
		{
			TestIt();
		}

		private void TestIt()
		{
		//DataTable dt = null;
		//const string cs = @"Data Source= E:\sqtest\sqtest.db;Version=3;";    //sqlite Datei
		//SQLiteConnection connection = new SQLiteConnection(cs);
		//SQLiteDataAdapter adapter;
		//SQLiteCommandBuilder builder;

		//try { 
		//		connection.Open();

		//		adapter = new SQLiteDataAdapter("Select * from personen;", connection);
		//		adapter.AcceptChangesDuringUpdate = true; ;
		//		builder = new SQLiteCommandBuilder(adapter);
		//		dt = new DataTable();
		//		adapter.Fill(dt);
		//		dt.Rows[0][4] = "aaa";
		//		DataTable dc = dt.GetChanges();
		//		string cmd = builder.GetUpdateCommand().CommandText;
		//		//adapter.UpdateCommand = builder.GetUpdateCommand();
		//		adapter.Update(dc);

		//		connection.Close();
		//	}
		//	catch(Exception e)
		//	{
		//		string error = e.Message;
		//		return;
		//	}
			SQLiteConnection cn = new SQLiteConnection();
        DataSet CustomersDataSet = new DataSet();
        SQLiteDataAdapter da;
        SQLiteCommandBuilder cmdBuilder;
  
        //Set the connection string of the SqlConnection object to connect
        //to the SQL Server database in which you created the sample
        //table.
        cn.ConnectionString = @"Data Source= E:\sqtest\chinook\chinook.db;Version=3;";

        cn.Open();      

        //Initialize the SqlDataAdapter object by specifying a Select command 
        //that retrieves data from the sample table.
        da = new SQLiteDataAdapter("select * from Customers order by CustomerId", cn);

        //Initialize the SqlCommandBuilder object to automatically generate and initialize
        //the UpdateCommand, InsertCommand, and DeleteCommand properties of the SqlDataAdapter.
        cmdBuilder = new SQLiteCommandBuilder(da);

        //Populate the dataset by running the Fill method of the SqlDataAdapter.
        da.Fill(CustomersDataSet, "Customers");

			cn.Close();
        //Display the Update, Insert, and Delete commands that were automatically generated
        //by the SqlCommandBuilder object.
        Console.WriteLine("Update command Generated by the Command Builder : ");
        Console.WriteLine("==================================================");
        Console.WriteLine(cmdBuilder.GetUpdateCommand().CommandText);
        Console.WriteLine("         ");

        Console.WriteLine("Insert command Generated by the Command Builder : ");
        Console.WriteLine("==================================================");
        Console.WriteLine(cmdBuilder.GetInsertCommand().CommandText);
        Console.WriteLine("         ");        

        Console.WriteLine("Delete command Generated by the Command Builder : ");
        Console.WriteLine("==================================================");
        Console.WriteLine(cmdBuilder.GetDeleteCommand().CommandText);
		Console.WriteLine("         ");

        //Write out the value in the CustName field before updating the data using the DataSet.
        Console.WriteLine("Customer Name before Update : " + CustomersDataSet.Tables["Customers"].Rows[0]["FirstName"]);
        cn.Open();      

        //Modify the value of the CustName field.
        CustomersDataSet.Tables["Customers"].Rows[0]["FirstName"] = "Jack";

        //Post the data modification to the database.
        da.Update(CustomersDataSet, "Customers");        

        Console.WriteLine("Customer Name updated successfully");

        //Close the database connection.
        cn.Close();

			



		}
	}
}
